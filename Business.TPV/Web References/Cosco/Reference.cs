//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace Business.TPV.Cosco {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Net;

    public partial class CosSoapHeader : System.Web.Services.Protocols.SoapHeader
    {
        public String account
        {
            get;
            set;
        }


        public String password
        {
            get;
            set;
        }

        public String Authorization
        {
            get;
            set;
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BookingServiceSoapBinding", Namespace="http://ebusiness.coscon.com/API/v1/BookingService")]
    public partial class BookingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback bookingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BookingService() {
            this.Url = global::Business.TPV.Properties.Settings.Default.Business_TPV_Cosco_BookingService__EnhancerByCGLIB__3a982778Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event bookingCompletedEventHandler bookingCompleted;
        public CosSoapHeader SoapHeaderValue
        {
            get;
            set;
        }
        protected override WebRequest GetWebRequest(Uri uri)
        {
            WebRequest webRequest = base.GetWebRequest(uri);
            webRequest.Headers.Add("Authorization", this.SoapHeaderValue.Authorization);
            return webRequest;
        }

        [SoapHeader("SoapHeaderValue")]
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://booking.webservices.neweb.coscon.com", ResponseNamespace="http://ebusiness.coscon.com/API/v1/BookingService")]
        [return: System.Xml.Serialization.SoapElementAttribute("bookingReturn")]
        public BookingResult booking(string in0) {
            object[] results = this.Invoke("booking", new object[] {
                        in0});
            return ((BookingResult)(results[0]));
        }
        
        /// <remarks/>
        public void bookingAsync(string in0) {
            this.bookingAsync(in0, null);
        }
        
        /// <remarks/>
        public void bookingAsync(string in0, object userState) {
            if ((this.bookingOperationCompleted == null)) {
                this.bookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbookingOperationCompleted);
            }
            this.InvokeAsync("booking", new object[] {
                        in0}, this.bookingOperationCompleted, userState);
        }
        
        private void OnbookingOperationCompleted(object arg) {
            if ((this.bookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bookingCompleted(this, new bookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="java:com.coscon.neweb.webservices.booking")]
    public partial class BookingResult {
        
        private string codeField;
        
        private string debugField;
        
        private bool flagField;
        
        private string msgField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string debug {
            get {
                return this.debugField;
            }
            set {
                this.debugField = value;
            }
        }
        
        /// <remarks/>
        public bool flag {
            get {
                return this.flagField;
            }
            set {
                this.flagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string msg {
            get {
                return this.msgField;
            }
            set {
                this.msgField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void bookingCompletedEventHandler(object sender, bookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BookingResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BookingResult)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
